Session
The session data is stored on the server, but it also stores an id string in a cookie to identify the user.
if cookies are not supported, the id string can't be stored, and the server can't pair the session 
when the user makes another request.

the session id is just a number generated by the server (either from a counter or randomly),
so it doesn't contain any information from the data that you store in the session object.


Server session
Server side session already explained in the others posts. 
The session is stored on the server but it needs a cookie to store an indicator of who is requesting the session value.

Client session
The new concept of WebStorage defined by W3C shows how a client side session is a nowadays needed.




No client state on the server 
By stateless it means that the server does not store any state about the client session on the server side.
The session is stored on the client. the server is stateless means that every server can service any client 
at any time, there is no session affinity or sticky sessions. the relevant session information is stored on the client
and passed to the server as needed.

That does not preclude other services that the web server talks to from maintain state about business object, just not about the clients current application/session state.

the client's application state should never be stored on the server, but passed around from the client to every place that needs it.


the load of session management is amortized across the clients, the clients store their session state and the servers can service many orders of magnitude or more clients in a stateless fashion.

Even for a service that you think will only need in the 10's of thousand concurrent users, you still should make your service stateless. tens of thousands is still tens of thousands and there will be time and space cost associated with it.

Stateless is how the HTTP protocol and the web in general was designed to operate and is an overall simpler implementation and you have a single code path instead of a bunch of server side logic to maintain a bunch of session state.




Statelessness means that every HTTP request happens in complete isolation.
When the client makes an HTTP request, it includes all information necessary for the server to fulfill that request.
the server never relies on information from previous requests.
if that information was important, the client would have sent it again in this request.
Statelessness also brings new features.
it's easier to distribute a stateless applciation across load-balanced servers.
A stateless application is also easy to cache.

there are actually two kinds of state.
Application state that lives on the client and Resource state that lives on the server.


A web service only needs to care about your application state when you're actually making a request.
the rest of time, it doesn't even know you exist.
this means that whenever a client makes a request,it must include all the application states the server will need to process it.

Resource state is the same for every client, and its proper place is on the server. 
when you upload a picture to a server, you create a new resource: the new picture has its own URI and can be the target of future requests. you can fetch, modify, and delete this resource through HTTP.








