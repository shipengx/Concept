Jersey, reference implementation to develop RESTful web service based on the JAX-RS specification.
in this tutorial, we show you how to develop a simple Hello world REST web application with Jersey.

Create a standard Maven web project structure.

mvn archetype:generate  -DgroupId=com.shipeng.test -DartifactId=RESTfulExample -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false


Project dependencies
Jersey is published in java.net Maven repository. 
To develop jersey REST application, just declare "jersey-server" in Maven pom.xml.

File: pom.xml

<project ...>

    <repositories>
        <repository>
            <id>maven2-repository.java.net</id>
            <name>Java.net Repository for Maven</name>
            <url>http://download.java.net/maven/2/</url>
            <layout>default</layout>
        </repository>
    </repositories>

    <dependencies>
    
        <dependency>
            <groupId>com.sun.jersey</groupId>
            <artifactId>jersey-server</artifactId>
            <version>1.8</version>
        </dependency>

    </dependencies>
    
</project>


REST service
simple REST service with Jersey

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Core.Response;


@Path("/hello")
public class HelloWorldExampleService {

    @GET
    @Path("/{param}")
    public Response getMsg(@PathParam("param") String msg) {
        String output = "jersey say : " + msg;

        return Response.status(200).entity(output).build();
    }

}//end class



5. web.xml
in web.xml, register "com.sun.jersey.spi.container.servlet.ServletContainer", and puts your Jersey service
folder under "init-param", "com.sun.jersey.config.property.packages".

File: web.xml

<web-app id="WebApp_ID" version="2.4"
    xmlns="http://java.sun.com/xml/ns/j2ee" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee 
    http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
    <display-name>Restful Web Application</display-name>

    <servlet>
        <servlet-name>jersey-serlvet</servlet-name>
        <servlet-class>
                     com.sun.jersey.spi.container.servlet.ServletContainer
                </servlet-class>
        <init-param>
             <param-name>com.sun.jersey.config.property.packages</param-name>
             <param-value>com.mkyong.rest</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>jersey-serlvet</servlet-name>
        <url-pattern>/rest/*</url-pattern>
    </servlet-mapping>

</web-app>




6. Demo
in this example, web request from "projectURL/rest/hello" will match to "HelloWorldService", via
@Path("/hello")

And the "{any value}" from "projectURL/rest/hello/{any value}" will match to parameter annotated with @PathParam.
URL: http://localhost:8080/RESTfulExample/rest/hello/mkyong




In this example we are going to get started with Java API for RESTful web services (JAX-RS),
a set of APIs to developer REST services. 
JAX-RS is part of the java EE. REST(Representational state transfer) is a simple stateless architecture that generally runs over HTTP.

REST-style architectures conventionally consist of clients and servers. 
Clients initiate requests to servers; servers process requests and return appropriate responses.
Requests and responses are built around the transfer of representations of resources.

Jersey is a reference implementation to develop RESTful web service based on the JAX-RS specification.









